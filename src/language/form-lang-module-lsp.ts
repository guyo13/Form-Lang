import {
  createDefaultModule,
  createDefaultSharedModule,
  DefaultSharedModuleContext,
  LangiumSharedServices,
} from "langium/lsp";
import { inject } from "langium";
import {
  FormLangGeneratedModule,
  FormLangGeneratedSharedModule,
} from "./generated/module.js";
import { registerValidationChecks } from "./form-lang-validator.js";
import { FormLangModule, FormLangServices } from "./form-lang-module.js";

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createFormLangServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices;
  FormLang: FormLangServices;
} {
  const shared = inject(
    createDefaultSharedModule(context),
    FormLangGeneratedSharedModule,
  );
  const FormLang = inject(
    createDefaultModule({ shared }),
    FormLangGeneratedModule,
    FormLangModule,
  );
  shared.ServiceRegistry.register(FormLang);
  registerValidationChecks(FormLang);
  if (!context.connection) {
    // We don't run inside a language server
    // Therefore, initialize the configuration provider instantly
    shared.workspace.ConfigurationProvider.initialized({});
  }
  return { shared, FormLang };
}
